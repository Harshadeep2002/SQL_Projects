-- COURIER MANAGEMENT SYSTEM
--TASK-1

-- CREATE USER TABLE
CREATE TABLE USERS (
    USERID INT PRIMARY KEY,
    NAME VARCHAR(255),
    EMAIL VARCHAR(255) UNIQUE,
    PASSWORD VARCHAR(255),
    CONTACTNUMBER VARCHAR(20),
    ADDRESS TEXT
);

-- INSERTING RECORDS INTO USER TABLE
INSERT INTO USERS (USERID, NAME, EMAIL, PASSWORD, CONTACTNUMBER, ADDRESS)
VALUES
    (1, 'HARSHADEEP', 'HARSHA@GMAIL.COM', 'PASSWORD123', '9885712090', '123 MAIN STREET, CITY'),
    (2, 'DHEERAJ', 'DHEERAJ@GMAIL.COM', 'PASSWORD456', '6300512027', '456 OAK AVENUE, TOWN'),
    (3, 'RAMESH', 'RAMESH@GMAIL.COM', 'PASSWORD789', '9985400322', '789 PINE ROAD, VILLAGE'),
    (4, 'MAHITHA', 'MAHITHA@GMAIL.COM', 'PASSWORDABC', '6543210987', '456 MAPLE LANE, TOWN'),
    (5, 'MOUNI', 'MOUNI@GMAIL.COM', 'PASSWORDDEF', '5432109876', '789 CEDAR STREET, CITY'),
    (6, 'SUNNY', 'SUNNY@GMAIL.COM', 'PASSWORDGHI', '4321098765', '123 BIRCH AVENUE, VILLAGE'),
    (7, 'BUNNY', 'BUNNY@GMAIL.COM', 'PASSWORDJKL', '3210987654', '456 ELM ROAD, TOWN'),
    (8, 'RIKKI', 'RIKKI@GMAIL.COM', 'PASSWORDMNO', '2109876543', '789 PINE LANE, CITY'),
    (9, 'KUNAL', 'KUNAL@GMAIL.COM', 'PASSWORDPQR', '1098765432', '123 OAK STREET, VILLAGE'),
    (10, 'SWATI', 'SWATI@GMAIL.COM', 'PASSWORDSTU', '9876543210', '456 CEDAR AVENUE, TOWN');

-- CREATE COURIER TABLE
CREATE TABLE COURIER (
    COURIERID INT PRIMARY KEY,
	EMPLOYEEID INT,
    SENDERNAME VARCHAR(255),
    SENDERADDRESS TEXT NOT NULL,
    RECEIVERNAME VARCHAR(255) NOT NULL,
    RECEIVERADDRESS TEXT NOT NULL,
    WEIGHT DECIMAL(5, 2),
    STATUS VARCHAR(50),
    TRACKINGNUMBER VARCHAR(20) UNIQUE,
    DELIVERYDATE DATE,
	SERVICEID INT,
	FOREIGN KEY (EMPLOYEEID) REFERENCES EMPLOYEE(EMPLOYEEID) ON DELETE CASCADE
);

-- INSERTING RECORDS INTO COURIER TABLE
INSERT INTO COURIER (COURIERID,EMPLOYEEID, SENDERNAME, SENDERADDRESS, RECEIVERNAME, RECEIVERADDRESS, WEIGHT, STATUS, TRACKINGNUMBER, DELIVERYDATE,SERVICEID)
VALUES
    (1,2, 'RAHUL SHARMA', '456 MAIN STREET, CITY', 'RIKKI', '789 OAK AVENUE, TOWN', 2.5, 'IN TRANSIT', 'TN123456', '2023-12-01',2),
    (2,3, 'NEHA VERMA', '789 PINE ROAD, VILLAGE', 'DHEERAJ', '123 MAPLE LANE, TOWN', 1.8, 'DELIVERED', 'TN789012', '2023-12-02',1),
    (3,1, 'VIJAY MEHTA', '456 CEDAR STREET, CITY', 'HARSHADEEP', '789 BIRCH AVENUE, VILLAGE', 3.0, 'IN TRANSIT', 'TN345678', '2023-12-03',3),
    (4,4, 'PRIYA SHARMA', '123 OAK STREET, VILLAGE', 'SWATI', '456 ELM ROAD, TOWN', 1.2, 'DELIVERED', 'TN901234', '2023-12-04',1),
    (5,5, 'SWATI DESAI', '789 PINE LANE, CITY', 'KUNAL', '123 BIRCH AVENUE, VILLAGE', 2.7, 'IN TRANSIT', 'TN567890', '2023-12-05',3),
    (6,7, 'SNEHA VERMA', '456 MAIN STREET, CITY', 'MAHITHA', '789 OAK AVENUE, TOWN', 2.3, 'DELIVERED', 'TN234567', '2023-12-06',2),
    (7,6, 'ANANYA REDDY', '789 CEDAR STREET, CITY', 'SUNNY', '123 MAPLE LANE, TOWN', 1.5, 'IN TRANSIT', 'TN890123', '2023-12-07',2),
    (8,9, 'RAJ SINGH', '456 ELM ROAD, TOWN', 'MOUNI', '789 PINE ROAD, VILLAGE', 2.8, 'DELIVERED', 'TN456789', '2023-12-08',3),
    (9,8, 'KUNAL SINGHANIA', '123 OAK STREET, VILLAGE', 'BUNNY', '456 CEDAR AVENUE, TOWN', 1.0, 'IN TRANSIT', 'TN012345', '2023-12-09',3),
    (10,10, 'AMIT KUMAR', '789 PINE LANE, CITY', 'SWATI', '123 MAPLE LANE, TOWN', 2.2, 'DELIVERED', 'TN678901', '2023-12-10',3),
    (11,1,'RAHUL SHARMA', '456 MAIN STREET, CITY', 'RIKKI', '789 OAK AVENUE, TOWN', 3.5, 'IN TRANSIT', 'TN123458', '2023-12-02',1);

SELECT * FROM COURIER
-- CREATE COURIERSERVICES TABLE
CREATE TABLE COURIERSERVICES (
    SERVICEID INT PRIMARY KEY,
    SERVICENAME VARCHAR(100),
    COST DECIMAL(8, 2)
);

-- INSERT RECORDS INTO COURIERSERVICES TABLE
INSERT INTO COURIERSERVICES (SERVICEID, SERVICENAME, COST)
VALUES
    (1, 'STANDARD DELIVERY', 10.99),
    (2, 'EXPRESS DELIVERY', 20.99),
    (3, 'ONE-DAY DELIVERY', 30.99);
    

-- CREATE EMPLOYEE TABLE
CREATE TABLE EMPLOYEE (
    EMPLOYEEID INT PRIMARY KEY,
    NAME VARCHAR(255),
    EMAIL VARCHAR(255) UNIQUE,
    CONTACTNUMBER VARCHAR(20),
    ROLE VARCHAR(50),
    SALARY DECIMAL(10, 2)
);

-- INSERT RECORDS INTO THE EMPLOYEE TABLE
INSERT INTO EMPLOYEE (EMPLOYEEID, NAME, EMAIL, CONTACTNUMBER, ROLE, SALARY)
VALUES
    (1, 'RAHUL SHARMA', 'RAHULSHARMA@GMAIL.COM', '9876543210', 'DELIVERY STAFF', 25000.00),
    (2, 'NEHA VERMA', 'NEHAVERMA@GMAIL.COM', '8765432109', 'MANAGER', 50000.00),
    (3, 'VIJAY MEHTA', 'VIJAYMEHTA@GMAIL.COM', '7654321098', 'DRIVER', 30000.00),
    (4, 'PRIYA SHARMA', 'PRIYASHARMA@GMAIL.COM', '6543210987', 'CLERK', 40000.00),
    (5, 'SWATI DESAI', 'SWATIDESAI@GMAIL.COM', '5432109876', 'DELIVERY STAFF', 25000.00),
    (6, 'SNEHA VERMA', 'SNEHAVERMA@GMAIL.COM', '4321098765', 'MANAGER', 50000.00),
    (7, 'ANANYA REDDY', 'ANANYAREDDY@GMAIL.COM', '3210987654', 'DRIVER', 30000.00),
    (8, 'RAJ SINGH', 'RAJSINGH@GMAIL.COM', '2109876543', 'CLERK', 40000.00),
    (9, 'KUNAL SINGHANIA', 'KUNALSINGHANIA@GMAIL.COM', '1098765432', 'DELIVERY STAFF', 25000.00),
    (10,'AMIT KUMAR', 'AMITKUMAR@GMAIL.COM', '9876543210', 'MANAGER', 50000.00);

-- CREATE LOCATION TABLE
CREATE TABLE LOCATION (
    LOCATIONID INT PRIMARY KEY,
    LOCATIONNAME VARCHAR(100),
    ADDRESS TEXT
);

-- INSERT RECORDS INTO THE LOCATION TABLE
INSERT INTO LOCATION (LOCATIONID, LOCATIONNAME, ADDRESS)
VALUES
    (1, 'CITY HUB', '123 MAIN STREET, CITY'),
    (2, 'TOWN CENTER', '456 OAK AVENUE, TOWN'),
    (3, 'VILLAGE SQUARE', '789 PINE ROAD, VILLAGE'),
    (4, 'TOWN PLAZA', '456 MAPLE LANE, TOWN'),
    (5, 'CITY SQUARE', '789 CEDAR STREET, CITY'),
    (6, 'VILLAGE MALL', '123 BIRCH AVENUE, VILLAGE'),
    (7, 'TOWN MALL', '456 ELM ROAD, TOWN'),
    (8, 'CITY CENTER', '789 PINE LANE, CITY'),
    (9, 'VILLAGE CENTER', '123 OAK STREET, VILLAGE'),
    (10, 'TOWN SQUARE', '456 CEDAR AVENUE, TOWN');

-- CREATE PAYMENT TABLE
CREATE TABLE PAYMENT (
    PAYMENTID INT PRIMARY KEY,
    COURIERID INT,
    LOCATIONID INT,
    AMOUNT DECIMAL(10, 2),
    PAYMENTDATE DATE,
    FOREIGN KEY (COURIERID) REFERENCES COURIER(COURIERID) ON DELETE CASCADE,
    FOREIGN KEY (LOCATIONID) REFERENCES LOCATION(LOCATIONID) ON DELETE CASCADE
);


-- INSERT RECORDS INTO THE PAYMENT TABLE
INSERT INTO PAYMENT (PAYMENTID, COURIERID, LOCATIONID, AMOUNT, PAYMENTDATE)
VALUES
    (1, 1, 1, 15.99, '2023-12-01'),
    (2, 2, 2, 25.99, '2023-12-02'),
    (3, 3, 3, 35.99, '2023-12-03'),
    (4, 4, 4, 45.99, '2023-12-04'),
    (5, 5, 5, 55.99, '2023-12-05'),
    (6, 6, 6, 65.99, '2023-12-06'),
    (7, 7, 7, 75.99, '2023-12-07'),
    (8, 8, 8, 85.99, '2023-12-08'),
    (9, 9, 9, 95.99, '2023-12-09'),
    (10, 10, 10, 105.99 , '2023-12-10'),
    (11, 11, 1, 25.99, '2024-02-01'),
    (12, 9, 3, 25.99, '2024-01-16');

--TASK-2

-- 1 LIST ALL CUSTOMERS
SELECT * FROM USERS

--2 LIST ALL ORDERS FOR A SPECIFIC CUSTOMER
SELECT * FROM COURIER WHERE SENDERNAME = 'RAHUL SHARMA' AND RECEIVERNAME = 'RIKKI'

--3 LIST ALL COURIERS
SELECT * FROM COURIER

--4 LIST ALL PACKAGES FOR A SPECIFIC CUSTOMER
SELECT * FROM COURIER WHERE TRACKINGNUMBER = 'TN345678'

--5 LIST ALL DELIVERIES FOR SPECIFIC COURIER
SELECT * FROM COURIER WHERE SENDERNAME = 'RAHUL SHARMA'

--6 LIST ALL UNDELIVERED PACKAGES
SELECT * FROM COURIER WHERE STATUS != 'DELIVERED'

--7 LIST ALL PACKAGES THAT AR SCHEDULED FORDELIVERY TODAY
SELECT * FROM COURIER WHERE DELIVERYDATE = GETDATE()

--8 LIST ALL PACKAGES WITH A SPECIFIC STATUS
SELECT * FROM COURIER WHERE STATUS = 'IN TRANSIT'

--9 CALCULATE THE TOTAL NUMBER OF PACKAGES FOR EACH COURIER
SELECT SENDERNAME,COUNT(*) FROM COURIER AS TOTAL_PACKAGES GROUP BY SENDERNAME

--10 FIND THE AVERAGE DELIVERY TIME FOR EACH COURIER
SELECT C.COURIERID, AVG(DATEDIFF(DAY, P.PAYMENTDATE,C.DELIVERYDATE)) AS AVG_DELIVERY_TIME FROM COURIER C
JOIN PAYMENT P
ON C.COURIERID = P.COURIERID
GROUP BY C.COURIERID

--11 LIST ALL PACKAGES WITH SPECIFIC WEIGHT RANGE
SELECT * FROM COURIER WHERE WEIGHT BETWEEN 1.5 AND 2.5

--12 RETRIEVE EMPLOYEES WHOSE NAMES CONTAIN JOHN
SELECT * FROM EMPLOYEE WHERE NAME LIKE '%AMIT%'

--13 RETRIEVE ALL COURIER RECORDS WITH PAYMENTS GREATER THAN $50
SELECT * FROM PAYMENT WHERE AMOUNT > 50


--TASK-3

--14 FIND THE TOTAL NUMBER OF COURIERS HANDLED BY EACH EMPLOYEE
SELECT E.EMPLOYEEID,COUNT(*) AS TOTAL_COURIERS FROM EMPLOYEE AS E
JOIN COURIER AS C
ON C.SENDERNAME = E.NAME
GROUP BY E.EMPLOYEEID

-- 15. CALCULATE THE TOTAL REVENUE GENERATED BY EACH LOCATION
SELECT L.LOCATIONID,L.LOCATIONNAME,SUM(P.AMOUNT) AS SUM FROM LOCATION AS L
JOIN PAYMENT AS P
ON L.LOCATIONID = P.LOCATIONID
GROUP BY L.LOCATIONID,L.LOCATIONNAME

-- 16. FIND THE TOTAL NUMBER OF COURIERS DELIVERED TO EACH LOCATION.
SELECT * FROM COURIER
SELECT * FROM LOCATION
SELECT * FROM PAYMENT

SELECT L.LOCATIONID,COUNT(C.COURIERID) AS TOTAL FROM COURIER C
JOIN PAYMENT P
ON C.COURIERID = P.COURIERID
JOIN LOCATION L
ON P.LOCATIONID = L.LOCATIONID
WHERE C.STATUS = 'DELIVERED'
GROUP BY L.LOCATIONID 


-- 17. FIND THE COURIER WITH THE HIGHEST AVERAGE DELIVERY TIME
SELECT COURIERID, TRACKINGNUMBER,AVG(DATEDIFF(DD,DELIVERYDATE,GETDATE())) AS AVG_DELIVERYTIME FROM COURIER
GROUP BY COURIERID,TRACKINGNUMBER
ORDER BY AVG_DELIVERYTIME DESC

-- 18. FIND LOCATIONS WITH TOTAL PAYMENTS LESS THAN A CERTAIN AMOUNT
SELECT L.LOCATIONID,L.LOCATIONNAME,SUM(P.AMOUNT) AS TOTAL FROM LOCATION L
JOIN PAYMENT P
ON L.LOCATIONID = P.LOCATIONID
GROUP BY L.LOCATIONID,L.LOCATIONNAME,P.AMOUNT
HAVING SUM(P.AMOUNT) BETWEEN 30 AND 40

-- 19. CALCULATE TOTAL PAYMENTS PER LOCATION
SELECT L.LOCATIONID,SUM(P.AMOUNT) AS TOTAL FROM LOCATION L
JOIN PAYMENT P
ON L.LOCATIONID = P.LOCATIONID
GROUP BY L.LOCATIONID

-- 20. RETRIEVE COURIERS WHO HAVE RECEIVED PAYMENTS TOTALING MORE THAN $1000 IN A SPECIFIC LOCATION
SELECT C.COURIERID,P.LOCATIONID,C.SENDERNAME,SUM(P.AMOUNT) FROM COURIER C
JOIN PAYMENT P
ON C.COURIERID = P.COURIERID
GROUP BY C.COURIERID,C.SENDERNAME,P.LOCATIONID
HAVING P.LOCATIONID = 1 AND SUM(P.AMOUNT) > 10

--21. RETRIEVE COURIERS WHO HAVE RECEIVED PAYMENTS TOTALING MORE THAN $1000 AFTER A CERTAIN DATE (PAYMENTDATE > 'YYYY-MM-DD')
SELECT C.COURIERID,P.PAYMENTDATE,SUM(P.AMOUNT) FROM COURIER C
JOIN PAYMENT P
ON C.COURIERID = P.COURIERID
GROUP BY C.COURIERID,P.PAYMENTDATE
HAVING P.PAYMENTDATE > '2023-12-10' AND SUM(P.AMOUNT) > 10


--22. RETRIEVE LOCATIONS WHERE THE TOTAL AMOUNT RECEIVED IS MORE THAN $5000 BEFORE A CERTAIN DATE (PAYMENTDATE > 'YYYY-MM-DD')
SELECT L.LOCATIONID, SUM(P.AMOUNT) AS TOTAL FROM LOCATION L
JOIN PAYMENT P 
ON L.LOCATIONID = P.LOCATIONID
GROUP BY L.LOCATIONID,P.PAYMENTDATE
HAVING SUM(P.AMOUNT) > 5000 AND PAYMENTDATE < '2024-01-01'

--TASK-4

-- 23. RETRIEVE PAYMENTS WITH COURIER INFORMATION
SELECT P.PAYMENTID,C.COURIERID,C.SENDERNAME,C.RECEIVERNAME FROM PAYMENT AS P
JOIN COURIER AS C
ON P.COURIERID = C.COURIERID

-- 24. RETRIEVE PAYMENTS WITH LOCATION INFORMATION
SELECT P.PAYMENTID,P.COURIERID,L.LOCATIONID,L.LOCATIONNAME FROM PAYMENT P
JOIN LOCATION L
ON P.LOCATIONID = L.LOCATIONID

-- 25. RETRIEVE PAYMENTS WITH COURIER AND LOCATION INFORMATION
SELECT P.PAYMENTID,C.COURIERID,C.SENDERADDRESS,C.RECEIVERADDRESS,L.LOCATIONID,L.LOCATIONNAME FROM PAYMENT P
JOIN COURIER C
ON P.COURIERID = C.COURIERID
JOIN LOCATION L
ON P.LOCATIONID = L.LOCATIONID

-- 26. LIST ALL PAYMENTS WITH COURIER DETAILS
SELECT P.PAYMENTID,C.COURIERID,C.SENDERNAME,C.RECEIVERNAME FROM PAYMENT P
JOIN COURIER C
ON P.COURIERID = C.COURIERID

-- 27. TOTAL PAYMENTS RECEIVED FOR EACH COURIER
SELECT C.COURIERID,COUNT(*),SUM(P.AMOUNT)FROM COURIER C
JOIN PAYMENT P
ON C.COURIERID = P.COURIERID
GROUP BY C.COURIERID

-- 28. LIST PAYMENTS MADE ON A SPECIFIC DATE
SELECT * FROM PAYMENT WHERE YEAR(PAYMENTDATE) = '2024'
SELECT * FROM PAYMENT WHERE PAYMENTDATE= '2023-12-01'

-- 29. GET COURIER INFORMATION FOR EACH PAYMENT
SELECT P.PAYMENTID, C.COURIERID,C.SENDERADDRESS,C.RECEIVERADDRESS,C.TRACKINGNUMBER FROM PAYMENT P
JOIN COURIER C
ON P.COURIERID = C.COURIERID

-- 30. GET PAYMENT DETAILS WITH LOCATION
SELECT P.PAYMENTID,L.LOCATIONID,L.LOCATIONNAME FROM PAYMENT P
JOIN LOCATION L
ON P.LOCATIONID = L.LOCATIONID

-- 31. CALCULATING TOTAL PAYMENTS FOR EACH COURIER
SELECT C.COURIERID,COUNT(*),SUM(P.AMOUNT)FROM COURIER C
JOIN PAYMENT P
ON C.COURIERID = P.COURIERID
GROUP BY C.COURIERID

-- 32. LIST PAYMENTS WITHIN A DATE RANGE
SELECT * FROM PAYMENT WHERE PAYMENTDATE BETWEEN '2023-12-01' AND '2023-12-10'

-- 33. RETRIEVE A LIST OF ALL USERS AND THEIR CORRESPONDING COURIER RECORDS , INCLUDING CASES WHERE THERE ARE NO MATCHES ON EITHER SIDE
SELECT U.USERID,C.COURIERID,U.NAME FROM USERS U
LEFT JOIN COURIER C
ON U.NAME = C.RECEIVERNAME

--34 RETRIEVE A LIST OF ALL COURIERS AND THEIR CORRESPONDING SERVICES, INCLUDING CASES WHERE THERE ARE NO MATCHES ON EITHER SIDE 
SELECT * FROM COURIER
SELECT * FROM COURIERSERVICES

SELECT C.COURIERID,S.SERVICEID,S.SERVICENAME FROM COURIER C
LEFT JOIN COURIERSERVICES S
ON C.SERVICEID = S.SERVICEID
ORDER BY S.SERVICENAME

--35 RETRIEVE A LIST OF ALL EMPLOYEES AND THEIR CORRESPONDING PAYMENTS, INCLUDING CASES WHERE THERE ARE NO MATCHES ON EITHER SIDE 

SELECT E.EMPLOYEEID, E.NAME,E.EMAIL,P.AMOUNT
FROM EMPLOYEE E
JOIN COURIER C ON  E.NAME = C.SENDERNAME
JOIN PAYMENT P ON C.COURIERID = P.COURIERID;

-- 36. LIST ALL USERS AND ALL COURIER SERVICES, SHOWING ALL POSSIBLE COMBINATIONS

SELECT U.USERID,U.NAME,S.SERVICEID,S.SERVICENAME FROM USERS U
JOIN COURIER  C
ON U.NAME = C.RECEIVERNAME
JOIN COURIERSERVICES S
ON C.SERVICEID = S.SERVICEID
ORDER BY USERID

-- 37 LIST ALL EMPLOYEES AND ALL LOCATIONS, SHOWING ALL POSSIBLE COMBINATIONS

SELECT E.EMPLOYEEID,E.NAME,L.LOCATIONID,L.LOCATIONNAME FROM EMPLOYEE E
JOIN COURIER C
ON E.NAME = C.SENDERNAME
JOIN PAYMENT P
ON C.COURIERID = P.COURIERID
JOIN LOCATION L
ON P.LOCATIONID = L.LOCATIONID


-- 38. RETRIEVE A LIST OF COURIERS AND THEIR CORRESPONDING SENDER INFORMATION

SELECT C.COURIERID,C.SENDERNAME,C.SENDERADDRESS,C.STATUS FROM COURIER AS C


-- 39. RETRIEVE A LIST OF COURIERS AND THEIR CORRESPONDING RECIEVER INFORMATION
SELECT C.COURIERID,C.RECEIVERNAME,C.RECEIVERADDRESS,C.STATUS FROM COURIER AS C

--40 RETRIEVE A LIST OF COURIERS ALONG WITH THE COURIER SERVICE DETAILS
SELECT C.COURIERID,S.SERVICENAME FROM COURIER C
JOIN COURIERSERVICES S
ON C.SERVICEID = S.SERVICEID

--41 RETRIEVE A LIST OF EMPLOYEES AND THE NUMBER OF COURIERS ASSIGNED TO EACH EMPLOYEE

SELECT E.EMPLOYEEID,E.NAME,COUNT(C.COURIERID) AS NO_OF_COURIERS FROM EMPLOYEE E
JOIN COURIER C
ON E.NAME = C.SENDERNAME
GROUP BY E.EMPLOYEEID,E.NAME

--42 RETRIEVE A LIST OF LOCATIONS AND THE TOTAL PAYMENT AMOUNT RECEIVED AT EACH LOCATION

SELECT L.LOCATIONID,L.LOCATIONNAME,SUM(P.AMOUNT) AS TOTAL_PAYMENT_RECIEVED FROM LOCATION L
JOIN PAYMENT P
ON L.LOCATIONID = P.LOCATIONID
GROUP BY L.LOCATIONID,L.LOCATIONNAME

--43 RETRIEVE ALL COURIERS SENT BY THE SAME SENDER (BASED ON SENDERNAME). 
SELECT C.COURIERID,C.SENDERNAME FROM COURIER C
WHERE C.SENDERNAME = 'RAHUL SHARMA'

-- 44 LIST ALL EMPLOYEES WHO SHARE THE SAME ROLE. 
SELECT  * FROM EMPLOYEE WHERE ROLE = 'MANAGER'

--45 RETRIEVE ALL PAYMENTS MADE FOR COURIERS SENT FROM THE SAME LOCATION. 

SELECT P.PAYMENTID,P.AMOUNT,P.PAYMENTDATE,C.SENDERADDRESS,C.SENDERNAME
FROM PAYMENT P
JOIN COURIER C ON P.COURIERID = C.COURIERID
WHERE C.SENDERADDRESS = '456 MAIN STREET,CITY'


--46 RETRIEVE ALL COURIERS SENT FROM THE SAME LOCATION (BASED ON SENDERADDRESS). 

SELECT * FROM COURIER WHERE SENDERADDRESS LIKE '456 CEDAR STREET, CITY'

 --47. LIST EMPLOYEES AND THE NUMBER OF COURIERS THEY HAVE DELIVERED: 
SELECT E.EMPLOYEEID,COUNT(C.COURIERID) AS DELIVERED FROM EMPLOYEE E
LEFT JOIN COURIER C
ON E.NAME = C.SENDERNAME
WHERE C.STATUS = 'DELIVERED'
GROUP BY  E.EMPLOYEEID

--48. FIND COURIERS THAT WERE PAID AN AMOUNT GREATER THAN THE COST OF THEIR RESPECTIVE COURIER SERVICES 
SELECT C.*, P.AMOUNT, S.COST
FROM COURIER C
JOIN PAYMENT P ON C.COURIERID = P.COURIERID
JOIN COURIERSERVICES S ON C.SERVICEID = S.SERVICEID
WHERE P.AMOUNT > S.COST;

--49 FIND COURIERS THAT HAVE A WEIGHT GREATER THAN THE AVERAGE WEIGHT OF ALL COURIERS 
SELECT * FROM COURIER WHERE WEIGHT > (SELECT AVG(WEIGHT) FROM COURIER)

--50 FIND THE NAMES OF ALL EMPLOYEES WHO HAVE A SALARY GREATER THAN THE AVERAGE SALARY
SELECT NAME FROM EMPLOYEE WHERE SALARY >ANY (SELECT AVG(SALARY) FROM EMPLOYEE)

--51 FIND THE TOTAL COST OF ALL COURIER SERVICES WHERE THE COST IS LESS THAN THE MAXIMUM COST 
SELECT SUM(COST) AS TOTALCOST FROM COURIERSERVICES WHERE COST < (SELECT MAX(COST) FROM COURIERSERVICES)

--52. FIND ALL COURIERS THAT HAVE BEEN PAID FOR 

SELECT C.COURIERID,COUNT(*) AS TOTAL_COURIERS FROM COURIER C
JOIN PAYMENT P
ON C.COURIERID = P.COURIERID
GROUP BY C.COURIERID
ORDER BY C.COURIERID

--53. FIND THE LOCATIONS WHERE THE MAXIMUM PAYMENT AMOUNT WAS MADE 

SELECT L.LOCATIONID,L.LOCATIONNAME,P.AMOUNT FROM LOCATION L
JOIN PAYMENT P
ON L.LOCATIONID = P.LOCATIONID
WHERE L.LOCATIONID IN (SELECT LOCATIONID FROM PAYMENT WHERE AMOUNT IN (SELECT MAX(AMOUNT) FROM PAYMENT))


--54. FIND ALL COURIERS WHOSE WEIGHT IS GREATER THAN THE WEIGHT OF ALL COURIERS SENT BY A SPECIFIC SENDER (E.G., 'SENDERNAME')
SELECT * FROM COURIER WHERE WEIGHT >ALL (SELECT WEIGHT FROM COURIER WHERE SENDERNAME = 'VIJAY MEHTA')



